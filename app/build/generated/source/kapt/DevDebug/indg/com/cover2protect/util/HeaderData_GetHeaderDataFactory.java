// Generated by Dagger (https://google.github.io/dagger).
package indg.com.cover2protect.util;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import java.util.HashMap;

public final class HeaderData_GetHeaderDataFactory implements Factory<HashMap<String, String>> {
  private final HeaderData module;

  public HeaderData_GetHeaderDataFactory(HeaderData module) {
    this.module = module;
  }

  @Override
  public HashMap<String, String> get() {
    return provideInstance(module);
  }

  public static HashMap<String, String> provideInstance(HeaderData module) {
    return proxyGetHeaderData(module);
  }

  public static HeaderData_GetHeaderDataFactory create(HeaderData module) {
    return new HeaderData_GetHeaderDataFactory(module);
  }

  public static HashMap<String, String> proxyGetHeaderData(HeaderData instance) {
    return Preconditions.checkNotNull(
        instance.getHeaderData(), "Cannot return null from a non-@Nullable @Provides method");
  }
}
