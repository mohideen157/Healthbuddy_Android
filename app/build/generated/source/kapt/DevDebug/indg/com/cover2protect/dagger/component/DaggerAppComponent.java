// Generated by Dagger (https://google.github.io/dagger).
package indg.com.cover2protect.dagger.component;

import android.app.Activity;
import android.app.Application;
import android.content.Context;
import androidx.fragment.app.Fragment;
import com.google.common.collect.ImmutableMap;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import dagger.internal.SingleCheck;
import indg.com.cover2protect.dagger.builder.ActivityBuilder_BindForgotPass;
import indg.com.cover2protect.dagger.builder.ActivityBuilder_BindForgotResetPass;
import indg.com.cover2protect.dagger.builder.ActivityBuilder_BindLoginActivity;
import indg.com.cover2protect.dagger.builder.ActivityBuilder_BindNewPass;
import indg.com.cover2protect.dagger.builder.ActivityBuilder_BindNutritionModule;
import indg.com.cover2protect.dagger.builder.ActivityBuilder_BindRegisterActivity;
import indg.com.cover2protect.dagger.builder.ActivityBuilder_BindRegistration;
import indg.com.cover2protect.dagger.builder.ActivityBuilder_BindResultActivity;
import indg.com.cover2protect.dagger.builder.ActivityBuilder_Bindhhi;
import indg.com.cover2protect.dagger.builder.ActivityBuilder_ProvideCal;
import indg.com.cover2protect.dagger.builder.ActivityBuilder_ProvideMedicalReport;
import indg.com.cover2protect.dagger.builder.ActivityBuilder_ProvideMedicalReportResponse;
import indg.com.cover2protect.dagger.builder.ActivityBuilder_ProvideViewModel;
import indg.com.cover2protect.dagger.builder.ActivityBuilder_ProvidehomeViewModel;
import indg.com.cover2protect.dagger.module.AppModule;
import indg.com.cover2protect.dagger.module.AppModule_ProvideContext$app_DevDebugFactory;
import indg.com.cover2protect.dagger.module.AppModule_ProvideDataManager$app_DevDebugFactory;
import indg.com.cover2protect.dagger.module.AppModule_ProvideHeader$app_DevDebugFactory;
import indg.com.cover2protect.dagger.module.AppModule_ProvidePreferenceName$app_DevDebugFactory;
import indg.com.cover2protect.dagger.module.AppModule_ProvidePreferencesHelper$app_DevDebugFactory;
import indg.com.cover2protect.dagger.module.NetworkModule_ProvidePostApi$app_DevDebugFactory;
import indg.com.cover2protect.dagger.module.NetworkModule_ProvideRetrofitInterface$app_DevDebugFactory;
import indg.com.cover2protect.helper.AppDataManager_Factory;
import indg.com.cover2protect.helper.AppPreferenceHelper_Factory;
import indg.com.cover2protect.presenter.ApiService;
import indg.com.cover2protect.presenter.DataManager;
import indg.com.cover2protect.presenter.PreferencesHelper;
import indg.com.cover2protect.util.HeaderData;
import indg.com.cover2protect.viewmodel.Device2.HomeModule;
import indg.com.cover2protect.viewmodel.Device2.HomeModule_ProvideViewModelFactory;
import indg.com.cover2protect.viewmodel.Device2.HomeViewModel;
import indg.com.cover2protect.viewmodel.calories.CaloriesModule;
import indg.com.cover2protect.viewmodel.calories.CaloriesModule_ProvideViewModelFactory;
import indg.com.cover2protect.viewmodel.calories.CaloriesViewModel;
import indg.com.cover2protect.viewmodel.forgotpasswordvm.ForgotPassProvider;
import indg.com.cover2protect.viewmodel.forgotpasswordvm.ForgotPassProvider_ProvideViewModelFactory;
import indg.com.cover2protect.viewmodel.forgotpasswordvm.ForgotPasswordViewModel;
import indg.com.cover2protect.viewmodel.hhi.HHIModule;
import indg.com.cover2protect.viewmodel.hhi.HHIModule_ProvideViewModelFactory;
import indg.com.cover2protect.viewmodel.hhi.HHIViewmodel;
import indg.com.cover2protect.viewmodel.loginviewmodel.LoginViewModel;
import indg.com.cover2protect.viewmodel.mainprofileviewmodel.MainProfileModule;
import indg.com.cover2protect.viewmodel.mainprofileviewmodel.MainProfileModule_ProvideViewModelFactory;
import indg.com.cover2protect.viewmodel.mainprofileviewmodel.ProfileViewModel;
import indg.com.cover2protect.viewmodel.medicalreport.MedicalReportModule;
import indg.com.cover2protect.viewmodel.medicalreport.MedicalReportModule_ProvideViewModelFactory;
import indg.com.cover2protect.viewmodel.medicalreport.MedicalReportViewModel;
import indg.com.cover2protect.viewmodel.pedometer.PedometerModule;
import indg.com.cover2protect.viewmodel.pedometer.PedometerModule_ProvideViewModelFactory;
import indg.com.cover2protect.viewmodel.pedometer.PedometerViewModel;
import indg.com.cover2protect.viewmodel.registerviewmodel.RegisterViewModel;
import indg.com.cover2protect.viewmodel.registration.RegistrationModule;
import indg.com.cover2protect.viewmodel.registration.RegistrationModule_ProvideViewModelFactory;
import indg.com.cover2protect.viewmodel.registration.RegistrationViewModel;
import indg.com.cover2protect.viewmodel.result.ResultModule;
import indg.com.cover2protect.viewmodel.result.ResultModule_ProvideviewmodelFactory;
import indg.com.cover2protect.viewmodel.result.ResultViewModel;
import indg.com.cover2protect.views.activity.device2.HistoryActivity;
import indg.com.cover2protect.views.activity.device2.HistoryActivity_MembersInjector;
import indg.com.cover2protect.views.activity.forgot_password.ForgotPassActivity;
import indg.com.cover2protect.views.activity.forgot_password.ForgotPassActivity_MembersInjector;
import indg.com.cover2protect.views.activity.forgot_password.NewPasswordActivity;
import indg.com.cover2protect.views.activity.forgot_password.NewPasswordActivity_MembersInjector;
import indg.com.cover2protect.views.activity.forgot_password.ResetPasswordActivity;
import indg.com.cover2protect.views.activity.forgot_password.ResetPasswordActivity_MembersInjector;
import indg.com.cover2protect.views.activity.health_profile.CaloriesTrends;
import indg.com.cover2protect.views.activity.health_profile.CaloriesTrends_MembersInjector;
import indg.com.cover2protect.views.activity.health_profile.HHIActivity;
import indg.com.cover2protect.views.activity.health_profile.HHIActivity_MembersInjector;
import indg.com.cover2protect.views.activity.health_report.HealthReportActivity;
import indg.com.cover2protect.views.activity.health_report.HealthReportActivity_MembersInjector;
import indg.com.cover2protect.views.activity.home.ProfileActivity;
import indg.com.cover2protect.views.activity.home.ProfileActivity_MembersInjector;
import indg.com.cover2protect.views.activity.login.LoginActivity;
import indg.com.cover2protect.views.activity.login.LoginActivity_MembersInjector;
import indg.com.cover2protect.views.activity.login.LoginModule;
import indg.com.cover2protect.views.activity.login.LoginModule_ProvideViewModelFactory;
import indg.com.cover2protect.views.activity.pedometer.PedometerActivity;
import indg.com.cover2protect.views.activity.pedometer.PedometerActivity_MembersInjector;
import indg.com.cover2protect.views.activity.registration.RegisterActivity;
import indg.com.cover2protect.views.activity.registration.RegisterActivity_MembersInjector;
import indg.com.cover2protect.views.activity.registration.RegisterModule;
import indg.com.cover2protect.views.activity.registration.RegisterModule_ProvideRegisterViewModelFactory;
import indg.com.cover2protect.views.activity.registration.otp_registration_activity.Registration_OTPActivity;
import indg.com.cover2protect.views.activity.registration.otp_registration_activity.Registration_OTPActivity_MembersInjector;
import indg.com.cover2protect.views.activity.result_view.ResultActivity;
import indg.com.cover2protect.views.activity.result_view.ResultActivity_MembersInjector;
import indg.com.cover2protect.views.activity.upload_file.UploadFileActivity;
import indg.com.cover2protect.views.activity.upload_file.UploadFileActivity_MembersInjector;
import indg.com.cover2protect.views.application.Cover2ProtectApp;
import indg.com.cover2protect.views.application.Cover2ProtectApp_MembersInjector;
import indg.com.cover2protect.views.fragments.History.AccountFragment.AccountFragment;
import indg.com.cover2protect.views.fragments.History.AccountFragment.AccountFragmentProvider_ProvideFragment;
import indg.com.cover2protect.views.fragments.History.DeviceFragment.DeviceFragment;
import indg.com.cover2protect.views.fragments.History.DeviceFragment.DeviceFragmentProvider_ProvideFragment;
import indg.com.cover2protect.views.fragments.History.ExcerciseFragment.ExcerciseFragment;
import indg.com.cover2protect.views.fragments.History.ExcerciseFragment.ExcerciseFragmentProvider_ProvideFragment;
import indg.com.cover2protect.views.fragments.History.HomeFragment.HomeFragment;
import indg.com.cover2protect.views.fragments.History.HomeFragment.HomeFragmentProvider_ProvideFragment;
import indg.com.cover2protect.views.fragments.profile.ProfileFragment;
import indg.com.cover2protect.views.fragments.profile.ProfileFragmentProvider_ProvideProfileFragment;
import indg.com.cover2protect.views.fragments.profile.ProfileFragment_MembersInjector;
import java.util.Map;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuilder_BindLoginActivity.LoginActivitySubcomponent.Builder>
      loginActivitySubcomponentBuilderProvider;

  private Provider<ActivityBuilder_BindRegisterActivity.RegisterActivitySubcomponent.Builder>
      registerActivitySubcomponentBuilderProvider;

  private Provider<ActivityBuilder_ProvideCal.CaloriesTrendsSubcomponent.Builder>
      caloriesTrendsSubcomponentBuilderProvider;

  private Provider<ActivityBuilder_Bindhhi.HHIActivitySubcomponent.Builder>
      hHIActivitySubcomponentBuilderProvider;

  private Provider<ActivityBuilder_BindNutritionModule.ProfileActivitySubcomponent.Builder>
      profileActivitySubcomponentBuilderProvider;

  private Provider<ActivityBuilder_BindResultActivity.ResultActivitySubcomponent.Builder>
      resultActivitySubcomponentBuilderProvider;

  private Provider<ActivityBuilder_BindForgotPass.ForgotPassActivitySubcomponent.Builder>
      forgotPassActivitySubcomponentBuilderProvider;

  private Provider<ActivityBuilder_BindNewPass.NewPasswordActivitySubcomponent.Builder>
      newPasswordActivitySubcomponentBuilderProvider;

  private Provider<ActivityBuilder_BindForgotResetPass.ResetPasswordActivitySubcomponent.Builder>
      resetPasswordActivitySubcomponentBuilderProvider;

  private Provider<ActivityBuilder_BindRegistration.Registration_OTPActivitySubcomponent.Builder>
      registration_OTPActivitySubcomponentBuilderProvider;

  private Provider<ActivityBuilder_ProvideViewModel.PedometerActivitySubcomponent.Builder>
      pedometerActivitySubcomponentBuilderProvider;

  private Provider<ActivityBuilder_ProvidehomeViewModel.HistoryActivitySubcomponent.Builder>
      historyActivitySubcomponentBuilderProvider;

  private Provider<ActivityBuilder_ProvideMedicalReport.UploadFileActivitySubcomponent.Builder>
      uploadFileActivitySubcomponentBuilderProvider;

  private Provider<
          ActivityBuilder_ProvideMedicalReportResponse.HealthReportActivitySubcomponent.Builder>
      healthReportActivitySubcomponentBuilderProvider;

  private Provider<Application> applicationProvider;

  private Provider<Context> provideContext$app_DevDebugProvider;

  private AppModule_ProvidePreferenceName$app_DevDebugFactory
      providePreferenceName$app_DevDebugProvider;

  private AppPreferenceHelper_Factory appPreferenceHelperProvider;

  private Provider<PreferencesHelper> providePreferencesHelper$app_DevDebugProvider;

  private AppDataManager_Factory appDataManagerProvider;

  private Provider<DataManager> provideDataManager$app_DevDebugProvider;

  private Provider<HeaderData> provideHeader$app_DevDebugProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return ImmutableMap
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            builderWithExpectedSize(14)
        .put(LoginActivity.class, (Provider) loginActivitySubcomponentBuilderProvider)
        .put(RegisterActivity.class, (Provider) registerActivitySubcomponentBuilderProvider)
        .put(CaloriesTrends.class, (Provider) caloriesTrendsSubcomponentBuilderProvider)
        .put(HHIActivity.class, (Provider) hHIActivitySubcomponentBuilderProvider)
        .put(ProfileActivity.class, (Provider) profileActivitySubcomponentBuilderProvider)
        .put(ResultActivity.class, (Provider) resultActivitySubcomponentBuilderProvider)
        .put(ForgotPassActivity.class, (Provider) forgotPassActivitySubcomponentBuilderProvider)
        .put(NewPasswordActivity.class, (Provider) newPasswordActivitySubcomponentBuilderProvider)
        .put(
            ResetPasswordActivity.class,
            (Provider) resetPasswordActivitySubcomponentBuilderProvider)
        .put(
            Registration_OTPActivity.class,
            (Provider) registration_OTPActivitySubcomponentBuilderProvider)
        .put(PedometerActivity.class, (Provider) pedometerActivitySubcomponentBuilderProvider)
        .put(HistoryActivity.class, (Provider) historyActivitySubcomponentBuilderProvider)
        .put(UploadFileActivity.class, (Provider) uploadFileActivitySubcomponentBuilderProvider)
        .put(HealthReportActivity.class, (Provider) healthReportActivitySubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.loginActivitySubcomponentBuilderProvider =
        new Provider<ActivityBuilder_BindLoginActivity.LoginActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindLoginActivity.LoginActivitySubcomponent.Builder get() {
            return new LoginActivitySubcomponentBuilder();
          }
        };
    this.registerActivitySubcomponentBuilderProvider =
        new Provider<ActivityBuilder_BindRegisterActivity.RegisterActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindRegisterActivity.RegisterActivitySubcomponent.Builder get() {
            return new RegisterActivitySubcomponentBuilder();
          }
        };
    this.caloriesTrendsSubcomponentBuilderProvider =
        new Provider<ActivityBuilder_ProvideCal.CaloriesTrendsSubcomponent.Builder>() {
          @Override
          public ActivityBuilder_ProvideCal.CaloriesTrendsSubcomponent.Builder get() {
            return new CaloriesTrendsSubcomponentBuilder();
          }
        };
    this.hHIActivitySubcomponentBuilderProvider =
        new Provider<ActivityBuilder_Bindhhi.HHIActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_Bindhhi.HHIActivitySubcomponent.Builder get() {
            return new HHIActivitySubcomponentBuilder();
          }
        };
    this.profileActivitySubcomponentBuilderProvider =
        new Provider<ActivityBuilder_BindNutritionModule.ProfileActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindNutritionModule.ProfileActivitySubcomponent.Builder get() {
            return new ProfileActivitySubcomponentBuilder();
          }
        };
    this.resultActivitySubcomponentBuilderProvider =
        new Provider<ActivityBuilder_BindResultActivity.ResultActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindResultActivity.ResultActivitySubcomponent.Builder get() {
            return new ResultActivitySubcomponentBuilder();
          }
        };
    this.forgotPassActivitySubcomponentBuilderProvider =
        new Provider<ActivityBuilder_BindForgotPass.ForgotPassActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindForgotPass.ForgotPassActivitySubcomponent.Builder get() {
            return new ForgotPassActivitySubcomponentBuilder();
          }
        };
    this.newPasswordActivitySubcomponentBuilderProvider =
        new Provider<ActivityBuilder_BindNewPass.NewPasswordActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindNewPass.NewPasswordActivitySubcomponent.Builder get() {
            return new NewPasswordActivitySubcomponentBuilder();
          }
        };
    this.resetPasswordActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuilder_BindForgotResetPass.ResetPasswordActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindForgotResetPass.ResetPasswordActivitySubcomponent.Builder
              get() {
            return new ResetPasswordActivitySubcomponentBuilder();
          }
        };
    this.registration_OTPActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuilder_BindRegistration.Registration_OTPActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_BindRegistration.Registration_OTPActivitySubcomponent.Builder
              get() {
            return new Registration_OTPActivitySubcomponentBuilder();
          }
        };
    this.pedometerActivitySubcomponentBuilderProvider =
        new Provider<ActivityBuilder_ProvideViewModel.PedometerActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_ProvideViewModel.PedometerActivitySubcomponent.Builder get() {
            return new PedometerActivitySubcomponentBuilder();
          }
        };
    this.historyActivitySubcomponentBuilderProvider =
        new Provider<ActivityBuilder_ProvidehomeViewModel.HistoryActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_ProvidehomeViewModel.HistoryActivitySubcomponent.Builder get() {
            return new HistoryActivitySubcomponentBuilder();
          }
        };
    this.uploadFileActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuilder_ProvideMedicalReport.UploadFileActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilder_ProvideMedicalReport.UploadFileActivitySubcomponent.Builder get() {
            return new UploadFileActivitySubcomponentBuilder();
          }
        };
    this.healthReportActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBuilder_ProvideMedicalReportResponse.HealthReportActivitySubcomponent
                .Builder>() {
          @Override
          public ActivityBuilder_ProvideMedicalReportResponse.HealthReportActivitySubcomponent
                  .Builder
              get() {
            return new HealthReportActivitySubcomponentBuilder();
          }
        };
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.provideContext$app_DevDebugProvider =
        DoubleCheck.provider(
            AppModule_ProvideContext$app_DevDebugFactory.create(
                builder.appModule, applicationProvider));
    this.providePreferenceName$app_DevDebugProvider =
        AppModule_ProvidePreferenceName$app_DevDebugFactory.create(builder.appModule);
    this.appPreferenceHelperProvider =
        AppPreferenceHelper_Factory.create(
            provideContext$app_DevDebugProvider, providePreferenceName$app_DevDebugProvider);
    this.providePreferencesHelper$app_DevDebugProvider =
        DoubleCheck.provider(
            AppModule_ProvidePreferencesHelper$app_DevDebugFactory.create(
                builder.appModule, appPreferenceHelperProvider));
    this.appDataManagerProvider =
        AppDataManager_Factory.create(providePreferencesHelper$app_DevDebugProvider);
    this.provideDataManager$app_DevDebugProvider =
        DoubleCheck.provider(
            AppModule_ProvideDataManager$app_DevDebugFactory.create(
                builder.appModule, appDataManagerProvider));
    this.provideHeader$app_DevDebugProvider =
        DoubleCheck.provider(AppModule_ProvideHeader$app_DevDebugFactory.create(builder.appModule));
  }

  @Override
  public void inject(Cover2ProtectApp app) {
    injectCover2ProtectApp(app);
  }

  @CanIgnoreReturnValue
  private Cover2ProtectApp injectCover2ProtectApp(Cover2ProtectApp instance) {
    Cover2ProtectApp_MembersInjector.injectActivityDispatchingAndroidInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private AppModule appModule;

    private Application application;

    @Override
    public AppComponent build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class LoginActivitySubcomponentBuilder
      extends ActivityBuilder_BindLoginActivity.LoginActivitySubcomponent.Builder {
    private LoginModule loginModule;

    private LoginActivity seedInstance;

    @Override
    public ActivityBuilder_BindLoginActivity.LoginActivitySubcomponent build() {
      if (loginModule == null) {
        this.loginModule = new LoginModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(LoginActivity.class.getCanonicalName() + " must be set");
      }
      return new LoginActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(LoginActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class LoginActivitySubcomponentImpl
      implements ActivityBuilder_BindLoginActivity.LoginActivitySubcomponent {
    private LoginModule loginModule;

    private Provider<Retrofit> provideRetrofitInterface$app_DevDebugProvider;

    private Provider<ApiService> providePostApi$app_DevDebugProvider;

    private LoginActivitySubcomponentImpl(LoginActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private LoginViewModel getLoginViewModel() {
      return LoginModule_ProvideViewModelFactory.proxyProvideViewModel(
          loginModule,
          DaggerAppComponent.this.provideDataManager$app_DevDebugProvider.get(),
          providePostApi$app_DevDebugProvider.get(),
          DaggerAppComponent.this.provideHeader$app_DevDebugProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final LoginActivitySubcomponentBuilder builder) {
      this.loginModule = builder.loginModule;
      this.provideRetrofitInterface$app_DevDebugProvider =
          SingleCheck.provider(NetworkModule_ProvideRetrofitInterface$app_DevDebugFactory.create());
      this.providePostApi$app_DevDebugProvider =
          SingleCheck.provider(
              NetworkModule_ProvidePostApi$app_DevDebugFactory.create(
                  provideRetrofitInterface$app_DevDebugProvider));
    }

    @Override
    public void inject(LoginActivity arg0) {
      injectLoginActivity(arg0);
    }

    @CanIgnoreReturnValue
    private LoginActivity injectLoginActivity(LoginActivity instance) {
      LoginActivity_MembersInjector.injectViewmodel(instance, getLoginViewModel());
      LoginActivity_MembersInjector.injectHeaderData(
          instance, DaggerAppComponent.this.provideHeader$app_DevDebugProvider.get());
      return instance;
    }
  }

  private final class RegisterActivitySubcomponentBuilder
      extends ActivityBuilder_BindRegisterActivity.RegisterActivitySubcomponent.Builder {
    private RegisterModule registerModule;

    private RegisterActivity seedInstance;

    @Override
    public ActivityBuilder_BindRegisterActivity.RegisterActivitySubcomponent build() {
      if (registerModule == null) {
        this.registerModule = new RegisterModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(RegisterActivity.class.getCanonicalName() + " must be set");
      }
      return new RegisterActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(RegisterActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class RegisterActivitySubcomponentImpl
      implements ActivityBuilder_BindRegisterActivity.RegisterActivitySubcomponent {
    private RegisterModule registerModule;

    private Provider<Retrofit> provideRetrofitInterface$app_DevDebugProvider;

    private Provider<ApiService> providePostApi$app_DevDebugProvider;

    private RegisterActivitySubcomponentImpl(RegisterActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private RegisterViewModel getRegisterViewModel() {
      return RegisterModule_ProvideRegisterViewModelFactory.proxyProvideRegisterViewModel(
          registerModule,
          DaggerAppComponent.this.provideDataManager$app_DevDebugProvider.get(),
          providePostApi$app_DevDebugProvider.get(),
          DaggerAppComponent.this.provideHeader$app_DevDebugProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final RegisterActivitySubcomponentBuilder builder) {
      this.registerModule = builder.registerModule;
      this.provideRetrofitInterface$app_DevDebugProvider =
          SingleCheck.provider(NetworkModule_ProvideRetrofitInterface$app_DevDebugFactory.create());
      this.providePostApi$app_DevDebugProvider =
          SingleCheck.provider(
              NetworkModule_ProvidePostApi$app_DevDebugFactory.create(
                  provideRetrofitInterface$app_DevDebugProvider));
    }

    @Override
    public void inject(RegisterActivity arg0) {
      injectRegisterActivity(arg0);
    }

    @CanIgnoreReturnValue
    private RegisterActivity injectRegisterActivity(RegisterActivity instance) {
      RegisterActivity_MembersInjector.injectViewModel(instance, getRegisterViewModel());
      return instance;
    }
  }

  private final class CaloriesTrendsSubcomponentBuilder
      extends ActivityBuilder_ProvideCal.CaloriesTrendsSubcomponent.Builder {
    private CaloriesModule caloriesModule;

    private CaloriesTrends seedInstance;

    @Override
    public ActivityBuilder_ProvideCal.CaloriesTrendsSubcomponent build() {
      if (caloriesModule == null) {
        this.caloriesModule = new CaloriesModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(CaloriesTrends.class.getCanonicalName() + " must be set");
      }
      return new CaloriesTrendsSubcomponentImpl(this);
    }

    @Override
    public void seedInstance(CaloriesTrends arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class CaloriesTrendsSubcomponentImpl
      implements ActivityBuilder_ProvideCal.CaloriesTrendsSubcomponent {
    private CaloriesModule caloriesModule;

    private Provider<Retrofit> provideRetrofitInterface$app_DevDebugProvider;

    private Provider<ApiService> providePostApi$app_DevDebugProvider;

    private CaloriesTrendsSubcomponentImpl(CaloriesTrendsSubcomponentBuilder builder) {
      initialize(builder);
    }

    private CaloriesViewModel getCaloriesViewModel() {
      return CaloriesModule_ProvideViewModelFactory.proxyProvideViewModel(
          caloriesModule,
          DaggerAppComponent.this.provideDataManager$app_DevDebugProvider.get(),
          providePostApi$app_DevDebugProvider.get(),
          DaggerAppComponent.this.provideHeader$app_DevDebugProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final CaloriesTrendsSubcomponentBuilder builder) {
      this.caloriesModule = builder.caloriesModule;
      this.provideRetrofitInterface$app_DevDebugProvider =
          SingleCheck.provider(NetworkModule_ProvideRetrofitInterface$app_DevDebugFactory.create());
      this.providePostApi$app_DevDebugProvider =
          SingleCheck.provider(
              NetworkModule_ProvidePostApi$app_DevDebugFactory.create(
                  provideRetrofitInterface$app_DevDebugProvider));
    }

    @Override
    public void inject(CaloriesTrends arg0) {
      injectCaloriesTrends(arg0);
    }

    @CanIgnoreReturnValue
    private CaloriesTrends injectCaloriesTrends(CaloriesTrends instance) {
      CaloriesTrends_MembersInjector.injectViewmodel(instance, getCaloriesViewModel());
      return instance;
    }
  }

  private final class HHIActivitySubcomponentBuilder
      extends ActivityBuilder_Bindhhi.HHIActivitySubcomponent.Builder {
    private HHIModule hHIModule;

    private HHIActivity seedInstance;

    @Override
    public ActivityBuilder_Bindhhi.HHIActivitySubcomponent build() {
      if (hHIModule == null) {
        this.hHIModule = new HHIModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(HHIActivity.class.getCanonicalName() + " must be set");
      }
      return new HHIActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(HHIActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class HHIActivitySubcomponentImpl
      implements ActivityBuilder_Bindhhi.HHIActivitySubcomponent {
    private HHIModule hHIModule;

    private Provider<Retrofit> provideRetrofitInterface$app_DevDebugProvider;

    private Provider<ApiService> providePostApi$app_DevDebugProvider;

    private HHIActivitySubcomponentImpl(HHIActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private HHIViewmodel getHHIViewmodel() {
      return HHIModule_ProvideViewModelFactory.proxyProvideViewModel(
          hHIModule,
          DaggerAppComponent.this.provideDataManager$app_DevDebugProvider.get(),
          providePostApi$app_DevDebugProvider.get(),
          DaggerAppComponent.this.provideHeader$app_DevDebugProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final HHIActivitySubcomponentBuilder builder) {
      this.hHIModule = builder.hHIModule;
      this.provideRetrofitInterface$app_DevDebugProvider =
          SingleCheck.provider(NetworkModule_ProvideRetrofitInterface$app_DevDebugFactory.create());
      this.providePostApi$app_DevDebugProvider =
          SingleCheck.provider(
              NetworkModule_ProvidePostApi$app_DevDebugFactory.create(
                  provideRetrofitInterface$app_DevDebugProvider));
    }

    @Override
    public void inject(HHIActivity arg0) {
      injectHHIActivity(arg0);
    }

    @CanIgnoreReturnValue
    private HHIActivity injectHHIActivity(HHIActivity instance) {
      HHIActivity_MembersInjector.injectViewmodel(instance, getHHIViewmodel());
      return instance;
    }
  }

  private final class ProfileActivitySubcomponentBuilder
      extends ActivityBuilder_BindNutritionModule.ProfileActivitySubcomponent.Builder {
    private MainProfileModule mainProfileModule;

    private ProfileActivity seedInstance;

    @Override
    public ActivityBuilder_BindNutritionModule.ProfileActivitySubcomponent build() {
      if (mainProfileModule == null) {
        this.mainProfileModule = new MainProfileModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(ProfileActivity.class.getCanonicalName() + " must be set");
      }
      return new ProfileActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(ProfileActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class ProfileActivitySubcomponentImpl
      implements ActivityBuilder_BindNutritionModule.ProfileActivitySubcomponent {
    private MainProfileModule mainProfileModule;

    private Provider<
            ProfileFragmentProvider_ProvideProfileFragment.ProfileFragmentSubcomponent.Builder>
        profileFragmentSubcomponentBuilderProvider;

    private Provider<Retrofit> provideRetrofitInterface$app_DevDebugProvider;

    private Provider<ApiService> providePostApi$app_DevDebugProvider;

    private ProfileActivitySubcomponentImpl(ProfileActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return ImmutableMap
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>of(
              ProfileFragment.class, (Provider) profileFragmentSubcomponentBuilderProvider);
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    private ProfileViewModel getProfileViewModel() {
      return MainProfileModule_ProvideViewModelFactory.proxyProvideViewModel(
          mainProfileModule,
          DaggerAppComponent.this.provideDataManager$app_DevDebugProvider.get(),
          providePostApi$app_DevDebugProvider.get(),
          DaggerAppComponent.this.provideHeader$app_DevDebugProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ProfileActivitySubcomponentBuilder builder) {
      this.profileFragmentSubcomponentBuilderProvider =
          new Provider<
              ProfileFragmentProvider_ProvideProfileFragment.ProfileFragmentSubcomponent
                  .Builder>() {
            @Override
            public ProfileFragmentProvider_ProvideProfileFragment.ProfileFragmentSubcomponent
                    .Builder
                get() {
              return new ProfileFragmentSubcomponentBuilder();
            }
          };
      this.mainProfileModule = builder.mainProfileModule;
      this.provideRetrofitInterface$app_DevDebugProvider =
          SingleCheck.provider(NetworkModule_ProvideRetrofitInterface$app_DevDebugFactory.create());
      this.providePostApi$app_DevDebugProvider =
          SingleCheck.provider(
              NetworkModule_ProvidePostApi$app_DevDebugFactory.create(
                  provideRetrofitInterface$app_DevDebugProvider));
    }

    @Override
    public void inject(ProfileActivity arg0) {
      injectProfileActivity(arg0);
    }

    @CanIgnoreReturnValue
    private ProfileActivity injectProfileActivity(ProfileActivity instance) {
      ProfileActivity_MembersInjector.injectFragmentDispatchingAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      ProfileActivity_MembersInjector.injectViewModel(instance, getProfileViewModel());
      return instance;
    }

    private final class ProfileFragmentSubcomponentBuilder
        extends ProfileFragmentProvider_ProvideProfileFragment.ProfileFragmentSubcomponent.Builder {
      private ProfileFragment seedInstance;

      @Override
      public ProfileFragmentProvider_ProvideProfileFragment.ProfileFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              ProfileFragment.class.getCanonicalName() + " must be set");
        }
        return new ProfileFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(ProfileFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class ProfileFragmentSubcomponentImpl
        implements ProfileFragmentProvider_ProvideProfileFragment.ProfileFragmentSubcomponent {
      private ProfileFragmentSubcomponentImpl(ProfileFragmentSubcomponentBuilder builder) {}

      private ProfileViewModel getProfileViewModel() {
        return MainProfileModule_ProvideViewModelFactory.proxyProvideViewModel(
            ProfileActivitySubcomponentImpl.this.mainProfileModule,
            DaggerAppComponent.this.provideDataManager$app_DevDebugProvider.get(),
            ProfileActivitySubcomponentImpl.this.providePostApi$app_DevDebugProvider.get(),
            DaggerAppComponent.this.provideHeader$app_DevDebugProvider.get());
      }

      @Override
      public void inject(ProfileFragment arg0) {
        injectProfileFragment(arg0);
      }

      @CanIgnoreReturnValue
      private ProfileFragment injectProfileFragment(ProfileFragment instance) {
        ProfileFragment_MembersInjector.injectViewmodel(instance, getProfileViewModel());
        return instance;
      }
    }
  }

  private final class ResultActivitySubcomponentBuilder
      extends ActivityBuilder_BindResultActivity.ResultActivitySubcomponent.Builder {
    private ResultModule resultModule;

    private ResultActivity seedInstance;

    @Override
    public ActivityBuilder_BindResultActivity.ResultActivitySubcomponent build() {
      if (resultModule == null) {
        this.resultModule = new ResultModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(ResultActivity.class.getCanonicalName() + " must be set");
      }
      return new ResultActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(ResultActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class ResultActivitySubcomponentImpl
      implements ActivityBuilder_BindResultActivity.ResultActivitySubcomponent {
    private ResultModule resultModule;

    private Provider<Retrofit> provideRetrofitInterface$app_DevDebugProvider;

    private Provider<ApiService> providePostApi$app_DevDebugProvider;

    private ResultActivitySubcomponentImpl(ResultActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private ResultViewModel getResultViewModel() {
      return ResultModule_ProvideviewmodelFactory.proxyProvideviewmodel(
          resultModule,
          DaggerAppComponent.this.provideDataManager$app_DevDebugProvider.get(),
          providePostApi$app_DevDebugProvider.get(),
          DaggerAppComponent.this.provideHeader$app_DevDebugProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ResultActivitySubcomponentBuilder builder) {
      this.resultModule = builder.resultModule;
      this.provideRetrofitInterface$app_DevDebugProvider =
          SingleCheck.provider(NetworkModule_ProvideRetrofitInterface$app_DevDebugFactory.create());
      this.providePostApi$app_DevDebugProvider =
          SingleCheck.provider(
              NetworkModule_ProvidePostApi$app_DevDebugFactory.create(
                  provideRetrofitInterface$app_DevDebugProvider));
    }

    @Override
    public void inject(ResultActivity arg0) {
      injectResultActivity(arg0);
    }

    @CanIgnoreReturnValue
    private ResultActivity injectResultActivity(ResultActivity instance) {
      ResultActivity_MembersInjector.injectViewmodel(instance, getResultViewModel());
      return instance;
    }
  }

  private final class ForgotPassActivitySubcomponentBuilder
      extends ActivityBuilder_BindForgotPass.ForgotPassActivitySubcomponent.Builder {
    private ForgotPassProvider forgotPassProvider;

    private ForgotPassActivity seedInstance;

    @Override
    public ActivityBuilder_BindForgotPass.ForgotPassActivitySubcomponent build() {
      if (forgotPassProvider == null) {
        this.forgotPassProvider = new ForgotPassProvider();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(
            ForgotPassActivity.class.getCanonicalName() + " must be set");
      }
      return new ForgotPassActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(ForgotPassActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class ForgotPassActivitySubcomponentImpl
      implements ActivityBuilder_BindForgotPass.ForgotPassActivitySubcomponent {
    private ForgotPassProvider forgotPassProvider;

    private Provider<Retrofit> provideRetrofitInterface$app_DevDebugProvider;

    private Provider<ApiService> providePostApi$app_DevDebugProvider;

    private ForgotPassActivitySubcomponentImpl(ForgotPassActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private ForgotPasswordViewModel getForgotPasswordViewModel() {
      return ForgotPassProvider_ProvideViewModelFactory.proxyProvideViewModel(
          forgotPassProvider,
          DaggerAppComponent.this.provideDataManager$app_DevDebugProvider.get(),
          providePostApi$app_DevDebugProvider.get(),
          DaggerAppComponent.this.provideHeader$app_DevDebugProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ForgotPassActivitySubcomponentBuilder builder) {
      this.forgotPassProvider = builder.forgotPassProvider;
      this.provideRetrofitInterface$app_DevDebugProvider =
          SingleCheck.provider(NetworkModule_ProvideRetrofitInterface$app_DevDebugFactory.create());
      this.providePostApi$app_DevDebugProvider =
          SingleCheck.provider(
              NetworkModule_ProvidePostApi$app_DevDebugFactory.create(
                  provideRetrofitInterface$app_DevDebugProvider));
    }

    @Override
    public void inject(ForgotPassActivity arg0) {
      injectForgotPassActivity(arg0);
    }

    @CanIgnoreReturnValue
    private ForgotPassActivity injectForgotPassActivity(ForgotPassActivity instance) {
      ForgotPassActivity_MembersInjector.injectViewmodel(instance, getForgotPasswordViewModel());
      return instance;
    }
  }

  private final class NewPasswordActivitySubcomponentBuilder
      extends ActivityBuilder_BindNewPass.NewPasswordActivitySubcomponent.Builder {
    private ForgotPassProvider forgotPassProvider;

    private NewPasswordActivity seedInstance;

    @Override
    public ActivityBuilder_BindNewPass.NewPasswordActivitySubcomponent build() {
      if (forgotPassProvider == null) {
        this.forgotPassProvider = new ForgotPassProvider();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(
            NewPasswordActivity.class.getCanonicalName() + " must be set");
      }
      return new NewPasswordActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(NewPasswordActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class NewPasswordActivitySubcomponentImpl
      implements ActivityBuilder_BindNewPass.NewPasswordActivitySubcomponent {
    private ForgotPassProvider forgotPassProvider;

    private Provider<Retrofit> provideRetrofitInterface$app_DevDebugProvider;

    private Provider<ApiService> providePostApi$app_DevDebugProvider;

    private NewPasswordActivitySubcomponentImpl(NewPasswordActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private ForgotPasswordViewModel getForgotPasswordViewModel() {
      return ForgotPassProvider_ProvideViewModelFactory.proxyProvideViewModel(
          forgotPassProvider,
          DaggerAppComponent.this.provideDataManager$app_DevDebugProvider.get(),
          providePostApi$app_DevDebugProvider.get(),
          DaggerAppComponent.this.provideHeader$app_DevDebugProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final NewPasswordActivitySubcomponentBuilder builder) {
      this.forgotPassProvider = builder.forgotPassProvider;
      this.provideRetrofitInterface$app_DevDebugProvider =
          SingleCheck.provider(NetworkModule_ProvideRetrofitInterface$app_DevDebugFactory.create());
      this.providePostApi$app_DevDebugProvider =
          SingleCheck.provider(
              NetworkModule_ProvidePostApi$app_DevDebugFactory.create(
                  provideRetrofitInterface$app_DevDebugProvider));
    }

    @Override
    public void inject(NewPasswordActivity arg0) {
      injectNewPasswordActivity(arg0);
    }

    @CanIgnoreReturnValue
    private NewPasswordActivity injectNewPasswordActivity(NewPasswordActivity instance) {
      NewPasswordActivity_MembersInjector.injectViewmodel(instance, getForgotPasswordViewModel());
      return instance;
    }
  }

  private final class ResetPasswordActivitySubcomponentBuilder
      extends ActivityBuilder_BindForgotResetPass.ResetPasswordActivitySubcomponent.Builder {
    private ForgotPassProvider forgotPassProvider;

    private ResetPasswordActivity seedInstance;

    @Override
    public ActivityBuilder_BindForgotResetPass.ResetPasswordActivitySubcomponent build() {
      if (forgotPassProvider == null) {
        this.forgotPassProvider = new ForgotPassProvider();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(
            ResetPasswordActivity.class.getCanonicalName() + " must be set");
      }
      return new ResetPasswordActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(ResetPasswordActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class ResetPasswordActivitySubcomponentImpl
      implements ActivityBuilder_BindForgotResetPass.ResetPasswordActivitySubcomponent {
    private ForgotPassProvider forgotPassProvider;

    private Provider<Retrofit> provideRetrofitInterface$app_DevDebugProvider;

    private Provider<ApiService> providePostApi$app_DevDebugProvider;

    private ResetPasswordActivitySubcomponentImpl(
        ResetPasswordActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private ForgotPasswordViewModel getForgotPasswordViewModel() {
      return ForgotPassProvider_ProvideViewModelFactory.proxyProvideViewModel(
          forgotPassProvider,
          DaggerAppComponent.this.provideDataManager$app_DevDebugProvider.get(),
          providePostApi$app_DevDebugProvider.get(),
          DaggerAppComponent.this.provideHeader$app_DevDebugProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final ResetPasswordActivitySubcomponentBuilder builder) {
      this.forgotPassProvider = builder.forgotPassProvider;
      this.provideRetrofitInterface$app_DevDebugProvider =
          SingleCheck.provider(NetworkModule_ProvideRetrofitInterface$app_DevDebugFactory.create());
      this.providePostApi$app_DevDebugProvider =
          SingleCheck.provider(
              NetworkModule_ProvidePostApi$app_DevDebugFactory.create(
                  provideRetrofitInterface$app_DevDebugProvider));
    }

    @Override
    public void inject(ResetPasswordActivity arg0) {
      injectResetPasswordActivity(arg0);
    }

    @CanIgnoreReturnValue
    private ResetPasswordActivity injectResetPasswordActivity(ResetPasswordActivity instance) {
      ResetPasswordActivity_MembersInjector.injectViewmodel(instance, getForgotPasswordViewModel());
      return instance;
    }
  }

  private final class Registration_OTPActivitySubcomponentBuilder
      extends ActivityBuilder_BindRegistration.Registration_OTPActivitySubcomponent.Builder {
    private RegistrationModule registrationModule;

    private Registration_OTPActivity seedInstance;

    @Override
    public ActivityBuilder_BindRegistration.Registration_OTPActivitySubcomponent build() {
      if (registrationModule == null) {
        this.registrationModule = new RegistrationModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(
            Registration_OTPActivity.class.getCanonicalName() + " must be set");
      }
      return new Registration_OTPActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(Registration_OTPActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class Registration_OTPActivitySubcomponentImpl
      implements ActivityBuilder_BindRegistration.Registration_OTPActivitySubcomponent {
    private RegistrationModule registrationModule;

    private Provider<Retrofit> provideRetrofitInterface$app_DevDebugProvider;

    private Provider<ApiService> providePostApi$app_DevDebugProvider;

    private Registration_OTPActivitySubcomponentImpl(
        Registration_OTPActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private RegistrationViewModel getRegistrationViewModel() {
      return RegistrationModule_ProvideViewModelFactory.proxyProvideViewModel(
          registrationModule,
          DaggerAppComponent.this.provideDataManager$app_DevDebugProvider.get(),
          providePostApi$app_DevDebugProvider.get(),
          DaggerAppComponent.this.provideHeader$app_DevDebugProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final Registration_OTPActivitySubcomponentBuilder builder) {
      this.registrationModule = builder.registrationModule;
      this.provideRetrofitInterface$app_DevDebugProvider =
          SingleCheck.provider(NetworkModule_ProvideRetrofitInterface$app_DevDebugFactory.create());
      this.providePostApi$app_DevDebugProvider =
          SingleCheck.provider(
              NetworkModule_ProvidePostApi$app_DevDebugFactory.create(
                  provideRetrofitInterface$app_DevDebugProvider));
    }

    @Override
    public void inject(Registration_OTPActivity arg0) {
      injectRegistration_OTPActivity(arg0);
    }

    @CanIgnoreReturnValue
    private Registration_OTPActivity injectRegistration_OTPActivity(
        Registration_OTPActivity instance) {
      Registration_OTPActivity_MembersInjector.injectViewModel(
          instance, getRegistrationViewModel());
      return instance;
    }
  }

  private final class PedometerActivitySubcomponentBuilder
      extends ActivityBuilder_ProvideViewModel.PedometerActivitySubcomponent.Builder {
    private PedometerModule pedometerModule;

    private PedometerActivity seedInstance;

    @Override
    public ActivityBuilder_ProvideViewModel.PedometerActivitySubcomponent build() {
      if (pedometerModule == null) {
        this.pedometerModule = new PedometerModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(
            PedometerActivity.class.getCanonicalName() + " must be set");
      }
      return new PedometerActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(PedometerActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class PedometerActivitySubcomponentImpl
      implements ActivityBuilder_ProvideViewModel.PedometerActivitySubcomponent {
    private PedometerModule pedometerModule;

    private Provider<Retrofit> provideRetrofitInterface$app_DevDebugProvider;

    private Provider<ApiService> providePostApi$app_DevDebugProvider;

    private PedometerActivitySubcomponentImpl(PedometerActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private PedometerViewModel getPedometerViewModel() {
      return PedometerModule_ProvideViewModelFactory.proxyProvideViewModel(
          pedometerModule,
          DaggerAppComponent.this.provideDataManager$app_DevDebugProvider.get(),
          providePostApi$app_DevDebugProvider.get(),
          DaggerAppComponent.this.provideHeader$app_DevDebugProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final PedometerActivitySubcomponentBuilder builder) {
      this.pedometerModule = builder.pedometerModule;
      this.provideRetrofitInterface$app_DevDebugProvider =
          SingleCheck.provider(NetworkModule_ProvideRetrofitInterface$app_DevDebugFactory.create());
      this.providePostApi$app_DevDebugProvider =
          SingleCheck.provider(
              NetworkModule_ProvidePostApi$app_DevDebugFactory.create(
                  provideRetrofitInterface$app_DevDebugProvider));
    }

    @Override
    public void inject(PedometerActivity arg0) {
      injectPedometerActivity(arg0);
    }

    @CanIgnoreReturnValue
    private PedometerActivity injectPedometerActivity(PedometerActivity instance) {
      PedometerActivity_MembersInjector.injectViewmodel(instance, getPedometerViewModel());
      return instance;
    }
  }

  private final class HistoryActivitySubcomponentBuilder
      extends ActivityBuilder_ProvidehomeViewModel.HistoryActivitySubcomponent.Builder {
    private HomeModule homeModule;

    private HistoryActivity seedInstance;

    @Override
    public ActivityBuilder_ProvidehomeViewModel.HistoryActivitySubcomponent build() {
      if (homeModule == null) {
        this.homeModule = new HomeModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(HistoryActivity.class.getCanonicalName() + " must be set");
      }
      return new HistoryActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(HistoryActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class HistoryActivitySubcomponentImpl
      implements ActivityBuilder_ProvidehomeViewModel.HistoryActivitySubcomponent {
    private HomeModule homeModule;

    private Provider<AccountFragmentProvider_ProvideFragment.AccountFragmentSubcomponent.Builder>
        accountFragmentSubcomponentBuilderProvider;

    private Provider<DeviceFragmentProvider_ProvideFragment.DeviceFragmentSubcomponent.Builder>
        deviceFragmentSubcomponentBuilderProvider;

    private Provider<
            ExcerciseFragmentProvider_ProvideFragment.ExcerciseFragmentSubcomponent.Builder>
        excerciseFragmentSubcomponentBuilderProvider;

    private Provider<HomeFragmentProvider_ProvideFragment.HomeFragmentSubcomponent.Builder>
        homeFragmentSubcomponentBuilderProvider;

    private Provider<Retrofit> provideRetrofitInterface$app_DevDebugProvider;

    private Provider<ApiService> providePostApi$app_DevDebugProvider;

    private HistoryActivitySubcomponentImpl(HistoryActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return ImmutableMap
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>of(
              AccountFragment.class,
              (Provider) accountFragmentSubcomponentBuilderProvider,
              DeviceFragment.class,
              (Provider) deviceFragmentSubcomponentBuilderProvider,
              ExcerciseFragment.class,
              (Provider) excerciseFragmentSubcomponentBuilderProvider,
              HomeFragment.class,
              (Provider) homeFragmentSubcomponentBuilderProvider);
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    private HomeViewModel getHomeViewModel() {
      return HomeModule_ProvideViewModelFactory.proxyProvideViewModel(
          homeModule,
          DaggerAppComponent.this.provideDataManager$app_DevDebugProvider.get(),
          providePostApi$app_DevDebugProvider.get(),
          DaggerAppComponent.this.provideHeader$app_DevDebugProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final HistoryActivitySubcomponentBuilder builder) {
      this.accountFragmentSubcomponentBuilderProvider =
          new Provider<
              AccountFragmentProvider_ProvideFragment.AccountFragmentSubcomponent.Builder>() {
            @Override
            public AccountFragmentProvider_ProvideFragment.AccountFragmentSubcomponent.Builder
                get() {
              return new AccountFragmentSubcomponentBuilder();
            }
          };
      this.deviceFragmentSubcomponentBuilderProvider =
          new Provider<
              DeviceFragmentProvider_ProvideFragment.DeviceFragmentSubcomponent.Builder>() {
            @Override
            public DeviceFragmentProvider_ProvideFragment.DeviceFragmentSubcomponent.Builder get() {
              return new DeviceFragmentSubcomponentBuilder();
            }
          };
      this.excerciseFragmentSubcomponentBuilderProvider =
          new Provider<
              ExcerciseFragmentProvider_ProvideFragment.ExcerciseFragmentSubcomponent.Builder>() {
            @Override
            public ExcerciseFragmentProvider_ProvideFragment.ExcerciseFragmentSubcomponent.Builder
                get() {
              return new ExcerciseFragmentSubcomponentBuilder();
            }
          };
      this.homeFragmentSubcomponentBuilderProvider =
          new Provider<HomeFragmentProvider_ProvideFragment.HomeFragmentSubcomponent.Builder>() {
            @Override
            public HomeFragmentProvider_ProvideFragment.HomeFragmentSubcomponent.Builder get() {
              return new HomeFragmentSubcomponentBuilder();
            }
          };
      this.homeModule = builder.homeModule;
      this.provideRetrofitInterface$app_DevDebugProvider =
          SingleCheck.provider(NetworkModule_ProvideRetrofitInterface$app_DevDebugFactory.create());
      this.providePostApi$app_DevDebugProvider =
          SingleCheck.provider(
              NetworkModule_ProvidePostApi$app_DevDebugFactory.create(
                  provideRetrofitInterface$app_DevDebugProvider));
    }

    @Override
    public void inject(HistoryActivity arg0) {
      injectHistoryActivity(arg0);
    }

    @CanIgnoreReturnValue
    private HistoryActivity injectHistoryActivity(HistoryActivity instance) {
      HistoryActivity_MembersInjector.injectFragmentDispatchingAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      HistoryActivity_MembersInjector.injectViewModel(instance, getHomeViewModel());
      return instance;
    }

    private final class AccountFragmentSubcomponentBuilder
        extends AccountFragmentProvider_ProvideFragment.AccountFragmentSubcomponent.Builder {
      private AccountFragment seedInstance;

      @Override
      public AccountFragmentProvider_ProvideFragment.AccountFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              AccountFragment.class.getCanonicalName() + " must be set");
        }
        return new AccountFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(AccountFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class AccountFragmentSubcomponentImpl
        implements AccountFragmentProvider_ProvideFragment.AccountFragmentSubcomponent {
      private AccountFragmentSubcomponentImpl(AccountFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(AccountFragment arg0) {}
    }

    private final class DeviceFragmentSubcomponentBuilder
        extends DeviceFragmentProvider_ProvideFragment.DeviceFragmentSubcomponent.Builder {
      private DeviceFragment seedInstance;

      @Override
      public DeviceFragmentProvider_ProvideFragment.DeviceFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(DeviceFragment.class.getCanonicalName() + " must be set");
        }
        return new DeviceFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(DeviceFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class DeviceFragmentSubcomponentImpl
        implements DeviceFragmentProvider_ProvideFragment.DeviceFragmentSubcomponent {
      private DeviceFragmentSubcomponentImpl(DeviceFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(DeviceFragment arg0) {}
    }

    private final class ExcerciseFragmentSubcomponentBuilder
        extends ExcerciseFragmentProvider_ProvideFragment.ExcerciseFragmentSubcomponent.Builder {
      private ExcerciseFragment seedInstance;

      @Override
      public ExcerciseFragmentProvider_ProvideFragment.ExcerciseFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              ExcerciseFragment.class.getCanonicalName() + " must be set");
        }
        return new ExcerciseFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(ExcerciseFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class ExcerciseFragmentSubcomponentImpl
        implements ExcerciseFragmentProvider_ProvideFragment.ExcerciseFragmentSubcomponent {
      private ExcerciseFragmentSubcomponentImpl(ExcerciseFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(ExcerciseFragment arg0) {}
    }

    private final class HomeFragmentSubcomponentBuilder
        extends HomeFragmentProvider_ProvideFragment.HomeFragmentSubcomponent.Builder {
      private HomeFragment seedInstance;

      @Override
      public HomeFragmentProvider_ProvideFragment.HomeFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(HomeFragment.class.getCanonicalName() + " must be set");
        }
        return new HomeFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(HomeFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class HomeFragmentSubcomponentImpl
        implements HomeFragmentProvider_ProvideFragment.HomeFragmentSubcomponent {
      private HomeFragmentSubcomponentImpl(HomeFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(HomeFragment arg0) {}
    }
  }

  private final class UploadFileActivitySubcomponentBuilder
      extends ActivityBuilder_ProvideMedicalReport.UploadFileActivitySubcomponent.Builder {
    private MedicalReportModule medicalReportModule;

    private UploadFileActivity seedInstance;

    @Override
    public ActivityBuilder_ProvideMedicalReport.UploadFileActivitySubcomponent build() {
      if (medicalReportModule == null) {
        this.medicalReportModule = new MedicalReportModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(
            UploadFileActivity.class.getCanonicalName() + " must be set");
      }
      return new UploadFileActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(UploadFileActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class UploadFileActivitySubcomponentImpl
      implements ActivityBuilder_ProvideMedicalReport.UploadFileActivitySubcomponent {
    private MedicalReportModule medicalReportModule;

    private Provider<Retrofit> provideRetrofitInterface$app_DevDebugProvider;

    private Provider<ApiService> providePostApi$app_DevDebugProvider;

    private UploadFileActivitySubcomponentImpl(UploadFileActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private MedicalReportViewModel getMedicalReportViewModel() {
      return MedicalReportModule_ProvideViewModelFactory.proxyProvideViewModel(
          medicalReportModule,
          DaggerAppComponent.this.provideDataManager$app_DevDebugProvider.get(),
          providePostApi$app_DevDebugProvider.get(),
          DaggerAppComponent.this.provideHeader$app_DevDebugProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final UploadFileActivitySubcomponentBuilder builder) {
      this.medicalReportModule = builder.medicalReportModule;
      this.provideRetrofitInterface$app_DevDebugProvider =
          SingleCheck.provider(NetworkModule_ProvideRetrofitInterface$app_DevDebugFactory.create());
      this.providePostApi$app_DevDebugProvider =
          SingleCheck.provider(
              NetworkModule_ProvidePostApi$app_DevDebugFactory.create(
                  provideRetrofitInterface$app_DevDebugProvider));
    }

    @Override
    public void inject(UploadFileActivity arg0) {
      injectUploadFileActivity(arg0);
    }

    @CanIgnoreReturnValue
    private UploadFileActivity injectUploadFileActivity(UploadFileActivity instance) {
      UploadFileActivity_MembersInjector.injectViewmodel(instance, getMedicalReportViewModel());
      return instance;
    }
  }

  private final class HealthReportActivitySubcomponentBuilder
      extends ActivityBuilder_ProvideMedicalReportResponse.HealthReportActivitySubcomponent
          .Builder {
    private MedicalReportModule medicalReportModule;

    private HealthReportActivity seedInstance;

    @Override
    public ActivityBuilder_ProvideMedicalReportResponse.HealthReportActivitySubcomponent build() {
      if (medicalReportModule == null) {
        this.medicalReportModule = new MedicalReportModule();
      }
      if (seedInstance == null) {
        throw new IllegalStateException(
            HealthReportActivity.class.getCanonicalName() + " must be set");
      }
      return new HealthReportActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(HealthReportActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class HealthReportActivitySubcomponentImpl
      implements ActivityBuilder_ProvideMedicalReportResponse.HealthReportActivitySubcomponent {
    private MedicalReportModule medicalReportModule;

    private Provider<Retrofit> provideRetrofitInterface$app_DevDebugProvider;

    private Provider<ApiService> providePostApi$app_DevDebugProvider;

    private HealthReportActivitySubcomponentImpl(HealthReportActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private MedicalReportViewModel getMedicalReportViewModel() {
      return MedicalReportModule_ProvideViewModelFactory.proxyProvideViewModel(
          medicalReportModule,
          DaggerAppComponent.this.provideDataManager$app_DevDebugProvider.get(),
          providePostApi$app_DevDebugProvider.get(),
          DaggerAppComponent.this.provideHeader$app_DevDebugProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final HealthReportActivitySubcomponentBuilder builder) {
      this.medicalReportModule = builder.medicalReportModule;
      this.provideRetrofitInterface$app_DevDebugProvider =
          SingleCheck.provider(NetworkModule_ProvideRetrofitInterface$app_DevDebugFactory.create());
      this.providePostApi$app_DevDebugProvider =
          SingleCheck.provider(
              NetworkModule_ProvidePostApi$app_DevDebugFactory.create(
                  provideRetrofitInterface$app_DevDebugProvider));
    }

    @Override
    public void inject(HealthReportActivity arg0) {
      injectHealthReportActivity(arg0);
    }

    @CanIgnoreReturnValue
    private HealthReportActivity injectHealthReportActivity(HealthReportActivity instance) {
      HealthReportActivity_MembersInjector.injectViewmodel(instance, getMedicalReportViewModel());
      return instance;
    }
  }
}
