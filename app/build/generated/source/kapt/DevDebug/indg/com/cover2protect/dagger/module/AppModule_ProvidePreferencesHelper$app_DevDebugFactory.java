// Generated by Dagger (https://google.github.io/dagger).
package indg.com.cover2protect.dagger.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import indg.com.cover2protect.helper.AppPreferenceHelper;
import indg.com.cover2protect.presenter.PreferencesHelper;
import javax.inject.Provider;

public final class AppModule_ProvidePreferencesHelper$app_DevDebugFactory
    implements Factory<PreferencesHelper> {
  private final AppModule module;

  private final Provider<AppPreferenceHelper> appPreferencesHelperProvider;

  public AppModule_ProvidePreferencesHelper$app_DevDebugFactory(
      AppModule module, Provider<AppPreferenceHelper> appPreferencesHelperProvider) {
    this.module = module;
    this.appPreferencesHelperProvider = appPreferencesHelperProvider;
  }

  @Override
  public PreferencesHelper get() {
    return provideInstance(module, appPreferencesHelperProvider);
  }

  public static PreferencesHelper provideInstance(
      AppModule module, Provider<AppPreferenceHelper> appPreferencesHelperProvider) {
    return proxyProvidePreferencesHelper$app_DevDebug(module, appPreferencesHelperProvider.get());
  }

  public static AppModule_ProvidePreferencesHelper$app_DevDebugFactory create(
      AppModule module, Provider<AppPreferenceHelper> appPreferencesHelperProvider) {
    return new AppModule_ProvidePreferencesHelper$app_DevDebugFactory(
        module, appPreferencesHelperProvider);
  }

  public static PreferencesHelper proxyProvidePreferencesHelper$app_DevDebug(
      AppModule instance, AppPreferenceHelper appPreferencesHelper) {
    return Preconditions.checkNotNull(
        instance.providePreferencesHelper$app_DevDebug(appPreferencesHelper),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
